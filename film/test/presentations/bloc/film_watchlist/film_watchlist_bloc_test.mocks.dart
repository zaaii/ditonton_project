// Mocks generated by Mockito 5.3.2 from annotations
// in film/test/presentations/bloc/film_watchlist/film_watchlist_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:core/core.dart' as _i6;
import 'package:dartz/dartz.dart' as _i2;
import 'package:film/domain/entities/film.dart' as _i7;
import 'package:film/domain/entities/film_detail.dart' as _i10;
import 'package:film/domain/repositories/film_repository.dart' as _i3;
import 'package:film/domain/usecases/get_film_watchlist.dart' as _i4;
import 'package:film/domain/usecases/get_film_watchlist_status.dart' as _i8;
import 'package:film/domain/usecases/remove_film_watchlist.dart' as _i11;
import 'package:film/domain/usecases/save_film_watchlist.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFilmRepository_1 extends _i1.SmartFake
    implements _i3.FilmRepository {
  _FakeFilmRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetWatchlistFilm].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchlistFilm extends _i1.Mock implements _i4.GetWatchlistFilm {
  MockGetWatchlistFilm() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.Film>>> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, List<_i7.Film>>>.value(
            _FakeEither_0<_i6.Failure, List<_i7.Film>>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, List<_i7.Film>>>);
}

/// A class which mocks [GetWatchListStatusFilm].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchListStatusFilm extends _i1.Mock
    implements _i8.GetWatchListStatusFilm {
  MockGetWatchListStatusFilm() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FilmRepository get filmRepository => (super.noSuchMethod(
        Invocation.getter(#filmRepository),
        returnValue: _FakeFilmRepository_1(
          this,
          Invocation.getter(#filmRepository),
        ),
      ) as _i3.FilmRepository);
  @override
  _i5.Future<bool> execute(int? id) => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [id],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [SaveWatchlistFilm].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveWatchlistFilm extends _i1.Mock implements _i9.SaveWatchlistFilm {
  MockSaveWatchlistFilm() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FilmRepository get filmRepository => (super.noSuchMethod(
        Invocation.getter(#filmRepository),
        returnValue: _FakeFilmRepository_1(
          this,
          Invocation.getter(#filmRepository),
        ),
      ) as _i3.FilmRepository);
  @override
  _i5.Future<_i2.Either<_i6.Failure, String>> execute(_i10.DetailFilm? film) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [film],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, String>>.value(
            _FakeEither_0<_i6.Failure, String>(
          this,
          Invocation.method(
            #execute,
            [film],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, String>>);
}

/// A class which mocks [RemoveWatchlistFilm].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveWatchlistFilm extends _i1.Mock
    implements _i11.RemoveWatchlistFilm {
  MockRemoveWatchlistFilm() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FilmRepository get filmRepository => (super.noSuchMethod(
        Invocation.getter(#filmRepository),
        returnValue: _FakeFilmRepository_1(
          this,
          Invocation.getter(#filmRepository),
        ),
      ) as _i3.FilmRepository);
  @override
  _i5.Future<_i2.Either<_i6.Failure, String>> execute(_i10.DetailFilm? film) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [film],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, String>>.value(
            _FakeEither_0<_i6.Failure, String>(
          this,
          Invocation.method(
            #execute,
            [film],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, String>>);
}
