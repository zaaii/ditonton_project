// Mocks generated by Mockito 5.3.2 from annotations
// in serialtv/test/presentations/bloc/serialtv_watchlist/serialtv_watchlist_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:core/core.dart' as _i6;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:serialtv/domain/entities/serialtv.dart' as _i7;
import 'package:serialtv/domain/entities/serialtv_detail.dart' as _i10;
import 'package:serialtv/domain/repositories/serialtv_repository.dart' as _i2;
import 'package:serialtv/domain/usecases/get_serialtv_watchlist.dart' as _i4;
import 'package:serialtv/domain/usecases/get_serialtv_watchlist_status.dart'
    as _i8;
import 'package:serialtv/domain/usecases/remove_serialtv_watchlist.dart'
    as _i11;
import 'package:serialtv/domain/usecases/save_serialtv_watchlist.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSerialTvRepository_0 extends _i1.SmartFake
    implements _i2.SerialTvRepository {
  _FakeSerialTvRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetWatchlistSerialTv].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchlistSerialTv extends _i1.Mock
    implements _i4.GetWatchlistSerialTv {
  MockGetWatchlistSerialTv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SerialTvRepository get serialTvRepository => (super.noSuchMethod(
        Invocation.getter(#serialTvRepository),
        returnValue: _FakeSerialTvRepository_0(
          this,
          Invocation.getter(#serialTvRepository),
        ),
      ) as _i2.SerialTvRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.SerialTv>>> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.SerialTv>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.SerialTv>>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.SerialTv>>>);
}

/// A class which mocks [GetWatchListStatusSerialTv].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchListStatusSerialTv extends _i1.Mock
    implements _i8.GetWatchListStatusSerialTv {
  MockGetWatchListStatusSerialTv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SerialTvRepository get serialTvRepository => (super.noSuchMethod(
        Invocation.getter(#serialTvRepository),
        returnValue: _FakeSerialTvRepository_0(
          this,
          Invocation.getter(#serialTvRepository),
        ),
      ) as _i2.SerialTvRepository);
  @override
  _i5.Future<bool> execute(int? id) => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [id],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [SaveWatchlistSerialTv].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveWatchlistSerialTv extends _i1.Mock
    implements _i9.SaveWatchlistSerialTv {
  MockSaveWatchlistSerialTv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SerialTvRepository get serialTvRepository => (super.noSuchMethod(
        Invocation.getter(#serialTvRepository),
        returnValue: _FakeSerialTvRepository_0(
          this,
          Invocation.getter(#serialTvRepository),
        ),
      ) as _i2.SerialTvRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, String>> execute(
          _i10.DetailSerialTv? serialtv) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [serialtv],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, String>>.value(
            _FakeEither_1<_i6.Failure, String>(
          this,
          Invocation.method(
            #execute,
            [serialtv],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, String>>);
}

/// A class which mocks [RemoveWatchlistSerialTv].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveWatchlistSerialTv extends _i1.Mock
    implements _i11.RemoveWatchlistSerialTv {
  MockRemoveWatchlistSerialTv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SerialTvRepository get serialTvRepository => (super.noSuchMethod(
        Invocation.getter(#serialTvRepository),
        returnValue: _FakeSerialTvRepository_0(
          this,
          Invocation.getter(#serialTvRepository),
        ),
      ) as _i2.SerialTvRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, String>> execute(
          _i10.DetailSerialTv? serialtv) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [serialtv],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, String>>.value(
            _FakeEither_1<_i6.Failure, String>(
          this,
          Invocation.method(
            #execute,
            [serialtv],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, String>>);
}
