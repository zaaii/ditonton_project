// Mocks generated by Mockito 5.3.2 from annotations
// in pencarian/test/helpers/film/film_test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:convert' as _i16;
import 'dart:typed_data' as _i17;

import 'package:core/core.dart' as _i7;
import 'package:dartz/dartz.dart' as _i2;
import 'package:film/data/datasources/db/film_database_helper.dart' as _i14;
import 'package:film/data/datasources/film_local_data_source.dart' as _i12;
import 'package:film/data/datasources/film_remote_data_source.dart' as _i10;
import 'package:film/data/models/film_detail_response.dart' as _i3;
import 'package:film/data/models/film_model.dart' as _i11;
import 'package:film/data/models/film_table.dart' as _i13;
import 'package:film/domain/entities/film.dart' as _i8;
import 'package:film/domain/entities/film_detail.dart' as _i9;
import 'package:film/domain/repositories/film_repository.dart' as _i5;
import 'package:http/http.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i15;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFilmDetailResponse_1 extends _i1.SmartFake
    implements _i3.FilmDetailResponse {
  _FakeFilmDetailResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_2 extends _i1.SmartFake implements _i4.Response {
  _FakeResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_3 extends _i1.SmartFake
    implements _i4.StreamedResponse {
  _FakeStreamedResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FilmRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilmRepository extends _i1.Mock implements _i5.FilmRepository {
  MockFilmRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.Film>>> getNowPlayingFilm() =>
      (super.noSuchMethod(
        Invocation.method(
          #getNowPlayingFilm,
          [],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, List<_i8.Film>>>.value(
            _FakeEither_0<_i7.Failure, List<_i8.Film>>(
          this,
          Invocation.method(
            #getNowPlayingFilm,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i8.Film>>>);
  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.Film>>> getFilmPopuler() =>
      (super.noSuchMethod(
        Invocation.method(
          #getFilmPopuler,
          [],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, List<_i8.Film>>>.value(
            _FakeEither_0<_i7.Failure, List<_i8.Film>>(
          this,
          Invocation.method(
            #getFilmPopuler,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i8.Film>>>);
  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.Film>>> getFilmTopRated() =>
      (super.noSuchMethod(
        Invocation.method(
          #getFilmTopRated,
          [],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, List<_i8.Film>>>.value(
            _FakeEither_0<_i7.Failure, List<_i8.Film>>(
          this,
          Invocation.method(
            #getFilmTopRated,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i8.Film>>>);
  @override
  _i6.Future<_i2.Either<_i7.Failure, _i9.DetailFilm>> getDetailFilm(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDetailFilm,
          [id],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i9.DetailFilm>>.value(
            _FakeEither_0<_i7.Failure, _i9.DetailFilm>(
          this,
          Invocation.method(
            #getDetailFilm,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i9.DetailFilm>>);
  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.Film>>> getRecommendationsFilm(
          int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecommendationsFilm,
          [id],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, List<_i8.Film>>>.value(
            _FakeEither_0<_i7.Failure, List<_i8.Film>>(
          this,
          Invocation.method(
            #getRecommendationsFilm,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i8.Film>>>);
  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.Film>>> searchFilm(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchFilm,
          [query],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, List<_i8.Film>>>.value(
            _FakeEither_0<_i7.Failure, List<_i8.Film>>(
          this,
          Invocation.method(
            #searchFilm,
            [query],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i8.Film>>>);
  @override
  _i6.Future<_i2.Either<_i7.Failure, String>> saveWatchlistFilm(
          _i9.DetailFilm? film) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveWatchlistFilm,
          [film],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, String>>.value(
            _FakeEither_0<_i7.Failure, String>(
          this,
          Invocation.method(
            #saveWatchlistFilm,
            [film],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, String>>);
  @override
  _i6.Future<_i2.Either<_i7.Failure, String>> removeWatchlistFilm(
          _i9.DetailFilm? film) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeWatchlistFilm,
          [film],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, String>>.value(
            _FakeEither_0<_i7.Failure, String>(
          this,
          Invocation.method(
            #removeWatchlistFilm,
            [film],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, String>>);
  @override
  _i6.Future<bool> isFilmAddedToWatchlist(int? id) => (super.noSuchMethod(
        Invocation.method(
          #isFilmAddedToWatchlist,
          [id],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.Film>>> getWatchlistFilm() =>
      (super.noSuchMethod(
        Invocation.method(
          #getWatchlistFilm,
          [],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, List<_i8.Film>>>.value(
            _FakeEither_0<_i7.Failure, List<_i8.Film>>(
          this,
          Invocation.method(
            #getWatchlistFilm,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i8.Film>>>);
}

/// A class which mocks [FilmRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilmRemoteDataSource extends _i1.Mock
    implements _i10.FilmRemoteDataSource {
  MockFilmRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i11.FilmModel>> getNowPlayingFilm() => (super.noSuchMethod(
        Invocation.method(
          #getNowPlayingFilm,
          [],
        ),
        returnValue: _i6.Future<List<_i11.FilmModel>>.value(<_i11.FilmModel>[]),
      ) as _i6.Future<List<_i11.FilmModel>>);
  @override
  _i6.Future<List<_i11.FilmModel>> getFilmPopuler() => (super.noSuchMethod(
        Invocation.method(
          #getFilmPopuler,
          [],
        ),
        returnValue: _i6.Future<List<_i11.FilmModel>>.value(<_i11.FilmModel>[]),
      ) as _i6.Future<List<_i11.FilmModel>>);
  @override
  _i6.Future<List<_i11.FilmModel>> getFilmTopRated() => (super.noSuchMethod(
        Invocation.method(
          #getFilmTopRated,
          [],
        ),
        returnValue: _i6.Future<List<_i11.FilmModel>>.value(<_i11.FilmModel>[]),
      ) as _i6.Future<List<_i11.FilmModel>>);
  @override
  _i6.Future<_i3.FilmDetailResponse> getDetailFilm(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDetailFilm,
          [id],
        ),
        returnValue:
            _i6.Future<_i3.FilmDetailResponse>.value(_FakeFilmDetailResponse_1(
          this,
          Invocation.method(
            #getDetailFilm,
            [id],
          ),
        )),
      ) as _i6.Future<_i3.FilmDetailResponse>);
  @override
  _i6.Future<List<_i11.FilmModel>> getRecommendationsFilm(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecommendationsFilm,
          [id],
        ),
        returnValue: _i6.Future<List<_i11.FilmModel>>.value(<_i11.FilmModel>[]),
      ) as _i6.Future<List<_i11.FilmModel>>);
  @override
  _i6.Future<List<_i11.FilmModel>> searchFilm(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchFilm,
          [query],
        ),
        returnValue: _i6.Future<List<_i11.FilmModel>>.value(<_i11.FilmModel>[]),
      ) as _i6.Future<List<_i11.FilmModel>>);
}

/// A class which mocks [FilmLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilmLocalDataSource extends _i1.Mock
    implements _i12.FilmLocalDataSource {
  MockFilmLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i13.FilmTable?> getFilmById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getFilmById,
          [id],
        ),
        returnValue: _i6.Future<_i13.FilmTable?>.value(),
      ) as _i6.Future<_i13.FilmTable?>);
  @override
  _i6.Future<List<_i13.FilmTable>> getWatchlistFilm() => (super.noSuchMethod(
        Invocation.method(
          #getWatchlistFilm,
          [],
        ),
        returnValue: _i6.Future<List<_i13.FilmTable>>.value(<_i13.FilmTable>[]),
      ) as _i6.Future<List<_i13.FilmTable>>);
  @override
  _i6.Future<String> insertWatchlistFilm(_i13.FilmTable? film) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertWatchlistFilm,
          [film],
        ),
        returnValue: _i6.Future<String>.value(''),
      ) as _i6.Future<String>);
  @override
  _i6.Future<String> removeWatchlistFilm(_i13.FilmTable? film) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeWatchlistFilm,
          [film],
        ),
        returnValue: _i6.Future<String>.value(''),
      ) as _i6.Future<String>);
}

/// A class which mocks [FilmDatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilmDatabaseHelper extends _i1.Mock
    implements _i14.FilmDatabaseHelper {
  MockFilmDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i15.Database?> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i6.Future<_i15.Database?>.value(),
      ) as _i6.Future<_i15.Database?>);
  @override
  _i6.Future<int> insertWatchlistFilm(_i13.FilmTable? film) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertWatchlistFilm,
          [film],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);
  @override
  _i6.Future<int> removeWatchlistFilm(_i13.FilmTable? film) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeWatchlistFilm,
          [film],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);
  @override
  _i6.Future<Map<String, dynamic>?> getFilmById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getFilmById,
          [id],
        ),
        returnValue: _i6.Future<Map<String, dynamic>?>.value(),
      ) as _i6.Future<Map<String, dynamic>?>);
  @override
  _i6.Future<List<Map<String, dynamic>>> getWatchlistFilm() =>
      (super.noSuchMethod(
        Invocation.method(
          #getWatchlistFilm,
          [],
        ),
        returnValue: _i6.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i6.Future<List<Map<String, dynamic>>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i4.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i4.Response>);
  @override
  _i6.Future<_i4.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i4.Response>);
  @override
  _i6.Future<_i4.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i16.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i4.Response>);
  @override
  _i6.Future<_i4.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i16.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i4.Response>);
  @override
  _i6.Future<_i4.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i16.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i4.Response>);
  @override
  _i6.Future<_i4.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i16.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i4.Response>);
  @override
  _i6.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<String>.value(''),
      ) as _i6.Future<String>);
  @override
  _i6.Future<_i17.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i17.Uint8List>.value(_i17.Uint8List(0)),
      ) as _i6.Future<_i17.Uint8List>);
  @override
  _i6.Future<_i4.StreamedResponse> send(_i4.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i6.Future<_i4.StreamedResponse>.value(_FakeStreamedResponse_3(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i6.Future<_i4.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
